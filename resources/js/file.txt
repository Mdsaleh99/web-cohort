let a =[1, 2, 3]
a[10] = 99
console.log(a.length)
answer: 11

why answer 11?
let a = [1, 2, 3]; // a.length = 3 initially
a[10] = 99;        // You set the value at index 10
When you assign a value to an index beyond the current length of the array (like a[10] = 99), JavaScript automatically:
Expands the array's length to accommodate that index.
Fills the missing indexes (a[3] to a[9]) with undefined.


So the array now looks like:
[
  1,        // a[0]
  2,        // a[1]
  3,        // a[2]
  <7 empty items>, // a[3] to a[9] are undefined (sparse array)
  99        // a[10]
]


❓ Q1: I created an array like this — let a = [1, 2, 3]. What is its initial length?
✅ A1: The initial length of the array is 3, because it contains three elements at indexes 0, 1, and 2.

❓ Q2: Then I did a[10] = 99. What happened to the array?
✅ A2: JavaScript added a new element at index 10. Since index 10 is beyond the current length, JavaScript automatically expands the array and fills the missing indexes (3 to 9) with undefined.

❓ Q3: Why does a.length now return 11?
✅ A3: Because the array now has a value at index 10, and array length is always highest index + 1. So 10 + 1 = 11.

❓ Q4: What do the elements from index 3 to 9 contain?
✅ A4: They are empty slots (i.e., they don't contain any values but are counted in the length). These are also called "holes" in a sparse array.

❓ Q5: Will those empty slots show up in a forEach loop?
✅ A5: No, forEach, map, and some other methods skip empty slots. But for...in or a for loop using index will include them.